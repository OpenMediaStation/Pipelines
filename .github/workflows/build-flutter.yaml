name: Build Flutter

on:
  workflow_call: # Makes it reusable
    inputs:
      flutter-version:
        required: false
        type: string
        default: "3.24.3"
      flatpak-name:
        required: true
        type: string
      app-name:
        required: true
        type: string

    secrets:
      ANDROID_KEYSTORE_BASE64:
        required: true
      ANDROID_KEYSTORE_PASSWORD:
        required: true
      CERTIFICATE_P12:
        required: false
      PROVISIONING_PROFILE:
        required: false
      APP_STORE_CONNECT_KEY_ID:
        required: false
      APP_STORE_CONNECT_ISSUER_ID:
        required: false
      APP_STORE_CONNECT_PRIVATE_KEY:
        required: false

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}

      - name: Get App version
        id: get_flutter_version
        uses: its404/get-flutter-version@v1.0.0
      
      - name: Setze Build-Nummer in pubspec.yaml
        uses: Dbono-dev/yaml-action@v1.0.3
        with:
          changes: |
            {
              "version": "${{ steps.get_flutter_version.outputs.version_number }}+${{ github.run_number }}"
            }
          commentOutDevDependencies: false
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libblkid-dev e2fslibs-dev liblzma-dev libmpv-dev mpv ninja-build fuse desktop-file-utils libsecret-1-dev

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Flutter Linux App
        run: flutter build linux

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-bin
          path: build/linux/x64/release/bundle

  build-flatpak:
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download linux-bin artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-bin
          path: ./linux-bin

      - run: zip -r linux-bin.zip linux-bin
      - run: ls -R

      - name: Upload Zipped Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-bin.zip
          path: linux-bin.zip

      - name: Install Flatpak and Dependencies
        run: |
          sudo apt update
          sudo apt install -y flatpak flatpak-builder libgtk-3-dev pkg-config libayatana-appindicator3-1
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install --user -y org.gnome.Sdk/x86_64/47 
          flatpak install --user -y org.gnome.Platform/x86_64/47

      - run: flatpak-builder --force-clean build-dir flatpak.yaml --repo=repo
      - run: flatpak build-bundle repo app.flatpak ${{ inputs.flatpak-name }}

      - name: Upload Flatpak Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app.flatpak
          path: app.flatpak

  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get App version
        id: get_flutter_version
        uses: its404/get-flutter-version@v1.0.0
      
      - name: Setze Build-Nummer in pubspec.yaml
        uses: Dbono-dev/yaml-action@v1.0.3
        with:
          changes: |
            {
              "version": "${{ steps.get_flutter_version.outputs.version_number }}+${{ github.run_number }}"
            }
          commentOutDevDependencies: false

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > $RUNNER_TEMP/upload-keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "storeFile=$RUNNER_TEMP/upload-keystore.jks" >> android/key.properties

      - name: Build Flutter APK
        run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-flutter-app.apk
          path: build/app/outputs/apk/release/app-release.apk

  build-aab:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > $RUNNER_TEMP/upload-keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "storeFile=$RUNNER_TEMP/upload-keystore.jks" >> android/key.properties

      - name: Build Flutter APK
        run: flutter build aab --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-flutter-app.aab
          path: build/app/outputs/bundle/release/app-release.aab 

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get App version
        id: get_flutter_version
        uses: its404/get-flutter-version@v1.0.0
      
      - name: Setze Build-Nummer in pubspec.yaml
        uses: Dbono-dev/yaml-action@v1.0.3
        with:
          changes: |
            {
              "version": "${{ steps.get_flutter_version.outputs.version_number }}+${{ github.run_number }}"
            }
          commentOutDevDependencies: false

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows App
        run: flutter build windows

      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: build\windows\x64\runner\Release\

      - name: Zip Windows Build
        run: |
          Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath windows-bin.zip
        shell: pwsh

      - name: Upload Zipped Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-bin.zip
          path: windows-bin.zip

  windows-msix-build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get App version
        id: get_flutter_version
        uses: its404/get-flutter-version@v1.0.0
      
      - name: Setze Build-Nummer in pubspec.yaml
        uses: Dbono-dev/yaml-action@v1.0.3
        with:
          changes: |
            {
              "version": "${{ steps.get_flutter_version.outputs.version_number }}+${{ github.run_number }}"
            }
          commentOutDevDependencies: false

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows App
        run: dart run msix:create

      - name: Upload Zipped Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app-name }}.msix
          path: build\windows\x64\runner\Release\${{ inputs.app-name }}.msix

  build-ios:
    runs-on: macos-latest  # Nutzt macOS für Xcode & iOS Builds

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: Get App version
        id: get_flutter_version
        uses: its404/get-flutter-version@v1.0.0
      
      - name: Setze Build-Nummer in pubspec.yaml
        uses: Dbono-dev/yaml-action@v1.0.3
        with:
          changes: |
            {
              "version": "${{ steps.get_flutter_version.outputs.version_number }}+${{ github.run_number }}"
            }
          commentOutDevDependencies: false

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          cache: true

      - name: 📦 Install Dependencies
        run: |
          cd ios
          pod deintegrate
          cd ..
          flutter clean
          flutter pub get


      - name: 📱 Build iOS App
        run: flutter build ios --no-codesign

      - name: 🔑 Setup Code Signing (if certificate exists)
        if: env.APPLE_SIGNING_CERT != ''
        env:
          APPLE_SIGNING_CERT: ${{ secrets.CERTIFICATE_P12 }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
          #CERT_PW: '' #${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          echo "$APPLE_SIGNING_CERT" | base64 --decode > apple_distribution.p12
          echo "$APPLE_PROVISIONING_PROFILE" | base64 --decode > provisioning.mobileprovision
          
          # Keychain einrichten & Zertifikat importieren
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import apple_distribution.p12 -k build.keychain -P "" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

          # Provisioning Profile an den richtigen Ort kopieren
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          #check if profile and certificate found by xcode
          security find-identity -v -p codesigning
          grep -a1 '<key>application-identifier</key>' ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision


      - name: 🔨 Build & Sign iOS App (IPA)
        if: env.APPLE_SIGNING_CERT != ''
        env:
          APPLE_SIGNING_CERT: ${{ secrets.CERTIFICATE_P12 }}
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos18.0 \
            -configuration Release \
            -archivePath build/App.xcarchive archive \
            -allowProvisioningUpdates

          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/ios

      - name: 🚀 Upload to TestFlight
        if: env.APP_STORE_CONNECT_PRIVATE_KEY != ''
        env:
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
        run: |
          mkdir -p ~/private_keys
          echo "$APP_STORE_CONNECT_PRIVATE_KEY" | base64 --decode > ~/private_keys/AuthKey_$APP_STORE_CONNECT_KEY_ID.p8

          xcrun altool --upload-app -f ios/build/ios/*.ipa -t ios \
            --apiKey "$APP_STORE_CONNECT_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \

      - name: 🚀 Upload .ipa as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OMS_Movies_and_Shows_IOS.ipa
          path: ios/build/ios/*.ipa


  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-flatpak, build-apk, build-windows, build-aab, windows-msix-build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: "Automated release for version ${{ github.ref_name }}"
          draft: false
          prerelease: false
          files: |
            artifacts/app.flatpak/app.flatpak
            artifacts/linux-bin.zip/linux-bin.zip
            artifacts/windows-bin.zip/windows-bin.zip
            artifacts/my-flutter-app.apk/app-release.apk
            artifacts/my-flutter-app.aab/app-release.aab
            artifacts/${{ inputs.app-name }}.msix/${{ inputs.app-name }}.msix
